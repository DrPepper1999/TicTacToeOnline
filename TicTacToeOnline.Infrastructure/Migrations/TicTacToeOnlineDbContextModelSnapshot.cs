// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TicTacToeOnline.Infrastructure.Persistence;

#nullable disable

namespace TicTacToeOnline.Infrastructure.Migrations
{
    [DbContext(typeof(TicTacToeOnlineDbContext))]
    partial class TicTacToeOnlineDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TicTacToeOnline.Domain.PlayerAggregate.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("TicTacToeOnline.Domain.RoomAggregate.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<int>("PlayersForStart")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("TicTacToeOnline.Infrastructure.Persistence.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("TicTacToeOnline.Domain.PlayerAggregate.Player", b =>
                {
                    b.OwnsOne("TicTacToeOnline.Domain.Common.ValueObjects.AverageRating", "AverageRating", b1 =>
                        {
                            b1.Property<Guid>("PlayerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("NumRatings")
                                .HasColumnType("integer");

                            b1.Property<double>("Value")
                                .HasColumnType("double precision");

                            b1.HasKey("PlayerId");

                            b1.ToTable("Players");

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.OwnsMany("TicTacToeOnline.Domain.PlayerAggregate.ValueObjects.ConnectionInfo", "Connections", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("PlayerId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("ConnectedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("ConnectionId")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id", "PlayerId");

                            b1.HasIndex("PlayerId");

                            b1.ToTable("ConnectionInfo", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PlayerId");
                        });

                    b.Navigation("AverageRating")
                        .IsRequired();

                    b.Navigation("Connections");
                });

            modelBuilder.Entity("TicTacToeOnline.Domain.RoomAggregate.Room", b =>
                {
                    b.OwnsOne("TicTacToeOnline.Domain.RoomAggregate.Entities.Game", "Game", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("GameId");

                            b1.Property<Guid>("RoomId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("PlayerTurn")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("UpdateDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id", "RoomId");

                            b1.HasIndex("RoomId")
                                .IsUnique();

                            b1.ToTable("Game", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RoomId");

                            b1.OwnsMany("TicTacToeOnline.Domain.PlayerAggregate.ValueObjects.PlayerId", "PlayerIds", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<Guid>("GameId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid?>("RoomId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("Value")
                                        .HasColumnType("uuid")
                                        .HasColumnName("PlayerIds");

                                    b2.HasKey("Id");

                                    b2.HasIndex("GameId", "RoomId");

                                    b2.ToTable("PlayerIds", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("GameId", "RoomId");
                                });

                            b1.OwnsOne("TicTacToeOnline.Domain.RoomAggregate.Entities.Map", "Map", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .HasColumnType("uuid")
                                        .HasColumnName("MapId");

                                    b2.Property<Guid>("GameId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("RoomId")
                                        .HasColumnType("uuid");

                                    b2.Property<DateTime>("CreatedDateTime")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<int>("Size")
                                        .HasMaxLength(16)
                                        .HasColumnType("integer");

                                    b2.Property<DateTime>("UpdateDateTime")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<string>("_fields")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("Id", "GameId", "RoomId");

                                    b2.HasIndex("GameId", "RoomId")
                                        .IsUnique();

                                    b2.ToTable("Map", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("GameId", "RoomId");
                                });

                            b1.Navigation("Map")
                                .IsRequired();

                            b1.Navigation("PlayerIds");
                        });

                    b.Navigation("Game")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
